"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRuntimeVariables = exports.injectScript = exports.remotes = exports.runtimeRemotes = exports.extractUrlAndGlobal = void 0;
var remoteVars = {};
try {
    // @ts-ignore
    remoteVars = (process.env.REMOTES || {});
}
catch (e) {
    console.error('Error parsing REMOTES environment variable', e);
}
// split the @ syntax into url and global
var extractUrlAndGlobal = function (urlAndGlobal) {
    var index = urlAndGlobal.indexOf('@');
    if (index <= 0 || index === urlAndGlobal.length - 1) {
        throw new Error("Invalid request \"".concat(urlAndGlobal, "\""));
    }
    return [urlAndGlobal.substring(index + 1), urlAndGlobal.substring(0, index)];
};
exports.extractUrlAndGlobal = extractUrlAndGlobal;
exports.runtimeRemotes = Object.entries(remoteVars).reduce(function (acc, item) {
    var key = item[0], value = item[1];
    // if its an object with a thenable (eagerly executing function)
    if (typeof value === 'object' && typeof value.then === 'function') {
        acc[key] = { asyncContainer: value };
    }
    // if its a function that must be called (lazily executing function)
    else if (typeof value === 'function') {
        // @ts-ignore
        acc[key] = { asyncContainer: value };
    }
    // if its just a string (global@url)
    else if (typeof value === 'string') {
        var _a = (0, exports.extractUrlAndGlobal)(value), url = _a[0], global_1 = _a[1];
        acc[key] = { global: global_1, url: url };
    }
    // we dont know or currently support this type
    else {
        //@ts-ignore
        console.log('remotes process', process.env.REMOTES);
        throw new Error("[mf] Invalid value received for runtime_remote \"".concat(key, "\""));
    }
    return acc;
}, {});
exports.remotes = exports.runtimeRemotes;
/**
 * Return initialized remote container by remote's key or its runtime remote item data.
 *
 * `runtimeRemoteItem` might be
 *    { global, url } - values obtained from webpack remotes option `global@url`
 * or
 *    { asyncContainer } - async container is a promise that resolves to the remote container
 */
var injectScript = function (keyOrRuntimeRemoteItem) {
    // 1) Load remote container if needed
    var asyncContainer;
    var reference = typeof keyOrRuntimeRemoteItem === 'string'
        ? exports.runtimeRemotes[keyOrRuntimeRemoteItem]
        : keyOrRuntimeRemoteItem;
    if (reference.asyncContainer) {
        // @ts-ignore
        asyncContainer = typeof reference.asyncContainer.then === 'function' ? reference.asyncContainer : reference.asyncContainer();
    }
    else {
        // This casting is just to satisfy typescript,
        // In reality remoteGlobal will always be a string;
        var remoteGlobal_1 = reference.global;
        // Check if theres an override for container key if not use remote global
        var containerKey_1 = reference.uniqueKey
            ? reference.uniqueKey
            : remoteGlobal_1;
        var __webpack_error__1 = new Error();
        var globalScope_1 = 
        //@ts-ignore
        typeof window !== 'undefined' ? window : global.__remote_scope__; // TODO: fix types
        asyncContainer = new Promise(function (resolve, reject) {
            function resolveRemoteGlobal() {
                var asyncContainer = globalScope_1[remoteGlobal_1];
                return resolve(asyncContainer);
            }
            if (typeof globalScope_1[remoteGlobal_1] !== 'undefined') {
                return resolveRemoteGlobal();
            }
            __webpack_require__.l(reference.url, function (event) {
                if (typeof globalScope_1[remoteGlobal_1] !== 'undefined') {
                    return resolveRemoteGlobal();
                }
                var errorType = event && (event.type === 'load' ? 'missing' : event.type);
                var realSrc = event && event.target && event.target.src;
                __webpack_error__1.message =
                    'Loading script failed.\n(' +
                        errorType +
                        ': ' +
                        realSrc +
                        ' or global var ' +
                        remoteGlobal_1 +
                        ')';
                __webpack_error__1.name = 'ScriptExternalLoadError';
                __webpack_error__1.type = errorType;
                __webpack_error__1.request = realSrc;
                reject(__webpack_error__1);
            }, containerKey_1);
        });
    }
    // 2) Initialize remote container
    // @ts-ignore
    return asyncContainer
        .then(function (container) {
        if (!__webpack_share_scopes__['default']) {
            // not always a promise, so we wrap it in a resolve
            return Promise.resolve(__webpack_init_sharing__('default')).then(function () {
                return container;
            });
        }
        else {
            return container;
        }
    })
        .then(function (container) {
        try {
            // WARNING: here might be a potential BUG.
            //   `container.init` does not return a Promise, and here we do not call `then` on it.
            // But according to [docs](https://webpack.js.org/concepts/module-federation/#dynamic-remote-containers)
            //   it must be async.
            // The problem may be in Proxy in NextFederationPlugin.js.
            //   or maybe a bug in the webpack itself - instead of returning rejected promise it just throws an error.
            // But now everything works properly and we keep this code as is.
            container.init(__webpack_share_scopes__['default']);
        }
        catch (e) {
            // maybe container already initialized so nothing to throw
        }
        return container;
    });
};
exports.injectScript = injectScript;
var createRuntimeVariables = function (remotes) {
    if (!remotes) {
        return {};
    }
    return Object.entries(remotes).reduce(function (acc, remote) {
        // handle promise new promise and external new promise
        if (remote[1].startsWith('promise ') || remote[1].startsWith('external ')) {
            var promiseCall = remote[1]
                .replace('promise ', '')
                .replace('external ', '');
            acc[remote[0]] = "function() {\n        return ".concat(promiseCall, "\n      }");
            return acc;
        }
        // if somehow its just the @ syntax or something else, pass it through
        acc[remote[0]] = JSON.stringify(remote[1]);
        return acc;
    }, {});
};
exports.createRuntimeVariables = createRuntimeVariables;
//# sourceMappingURL=common.js.map